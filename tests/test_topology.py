import time
from graph import Graph
from tests.test_graph import graph02, graph_cycle_6, graph_cycle_5


def test_subgraph():
    g = graph02()
    g2 = g.subgraph_from_nodes([1, 2, 3, 4])
    d = {1: {2: 1, 4: 1},
         2: {3: 1},
         }
    assert g2.is_subgraph(g)
    for k, v in d.items():
        for k2, d2 in v.items():
            assert g.edge(k, k2) == g2.edge(k, k2)

    g3 = graph02()
    g3.add_edge(3, 100, 7)
    assert not g3.is_subgraph(g2)


def test_is_partite():
    g = graph_cycle_6()
    bol, partitions = g.is_partite(n=2)
    assert bol is True

    g = graph_cycle_5()
    bol, part = g.is_partite(n=2)
    assert bol is False
    bol, part = g.is_partite(n=5)
    assert bol is True
    assert len(part) == 5


def test_is_cyclic():
    g = graph_cycle_5()
    assert g.has_cycles()


def test_is_not_cyclic():
    g = graph02()
    assert not g.has_cycles()


def test_is_really_cyclic():
    g = Graph(from_list=[(1, 1, 1), (2, 2, 1)])  # two loops onto themselves.
    assert g.has_cycles()


def test_components():
    g = Graph(from_list=[
        (1, 2, 1),  # component 1
        (2, 1, 1),
        (3, 3, 1),  # component 2
        (4, 5, 1),
        (5, 6, 1),  # component 3
        (5, 7, 1),
        (6, 8, 1),
        (7, 8, 1),
        (8, 9, 1),
    ])
    g.add_node(10)  # component 4
    components = g.components()
    assert len(components) == 4
    assert {1, 2} in components
    assert {3} in components
    assert {4, 5, 6, 7, 8, 9} in components
    assert {10} in components


def test_phaselines():
    """
     1 +---> 3 +--> 5 +---> 6          [7]
                    ^       ^
       +------------+       |
       |
     2 +---> 4 +----------> +
    """
    g = Graph(from_list=[
        (1, 3, 1),
        (2, 4, 1),
        (2, 5, 1),
        (3, 5, 1),
        (4, 6, 1),
        (5, 6, 1),
    ])
    g.add_node(7)

    p = g.phase_lines()
    assert set(g.nodes()) == set(p.keys())
    expects = {1: 0, 2: 0, 7: 0, 3: 1, 4: 1, 5: 2, 6: 3}
    assert p == expects, (p, expects)


def test_phaselines_for_larger_graph():
    L = [('n3', 2, 1), ('n3', 4, 1), (2, 1, 1), (1, 'n6', 1), ('n6', 6, 1), (4, 3, 1),
         (3, 'n62', 1), ('n62', 7, 1), (6, 5, 1), (5, 'n4', 1), ('n4', 18, 1), (7, 5, 1),
         ('n322', 9, 1), ('n322', 20, 1), (9, 8, 1), (8, 'n32', 1), ('n32', 11, 1),
         ('n32', 13, 1), (11, 10, 1), (10, 'n65', 1), ('n65', 15, 1), (13, 12, 1),
         (12, 'n652', 1), ('n652', 16, 1), (15, 14, 1), (14, 'n42', 1), ('n42', 23, 1),
         (16, 14, 1), (18, 17, 1), (17, 'n322', 1), (20, 19, 1), (19, 'n653', 1), ('n653', 21, 1),
         (21, 14, 1), (23, 22, 1), (22, 'n3222', 1), ('n3222', 25, 1), ('n3222', 27, 1), (25, 24, 1),
         (24, 'n6532', 1), ('n6532', 29, 1), (27, 26, 1), (26, 'n65322', 1), ('n65322', 30, 1),
         (29, 28, 1), (28, 'n422', 1), ('n422', 65, 1), (30, 28, 1), ('n34', 32, 1),
         ('n34', 34, 1), (32, 31, 1), (31, 'n342', 1), ('n342', 36, 1), ('n342', 38, 1),
         (34, 33, 1), (33, 'n65323', 1), ('n65323', 40, 1), (36, 35, 1), (35, 'n653232', 1),
         ('n653232', 41, 1), (38, 37, 1), (37, 'n6532322', 1), ('n6532322', 42, 1), (40, 39, 1),
         (39, 'n4222', 1), ('n4222', 70, 1), (41, 39, 1), (42, 39, 1), ('n343', 44, 1),
         ('n343', 103, 1), (44, 43, 1), (43, 'n653233', 1), ('n653233', 48, 1),
         ('n3433', 46, 1),
         ('n3433', 105, 1), (46, 45, 1), (45, 'n6532332', 1), ('n6532332', 49, 1), (48, 47, 1),
         (47, 'n42222', 1), ('n42222', 108, 1), (49, 47, 1), ('n422222', 51, 1), (51, 50, 1),
         (50, 'n34323', 1), ('n34323', 72, 1), ('n34323', 75, 1), ('n3432', 53, 1),
         ('n3432', 55, 1), (53, 52, 1), (52, 'n6532333', 1), ('n6532333', 57, 1), (55, 54, 1),
         (54, 'n34322', 1), ('n34322', 60, 1), ('n34322', 62, 1), (57, 56, 1),
         (56, 'n422222', 1), ('n65323332', 58, 1), (58, 56, 1), (60, 59, 1), (59, 'n65323332', 1),
         (62, 61, 1), (61, 'n65323333', 1), ('n65323333', 63, 1), (63, 56, 1), (65, 64, 1),
         (64, 'n34', 1), ('n65323334', 67, 1), (67, 66, 1), (66, 'n4222222', 1),
         ('n4222222', 92, 1), ('n653233322', 68, 1), (68, 66, 1), (70, 69, 1), (69, 'n3432', 1),
         (72, 71, 1), (71, 'n65323334', 1), ('n6532333222', 73, 1), (73, 66, 1), (75, 74, 1),
         (74, 'n343232', 1), ('n343232', 79, 1), ('n343232', 82, 1), ('n3432322', 77, 1),
         ('n3432322', 84, 1), (77, 76, 1), (76, 'n6532333223', 1), ('n6532333223', 80, 1),
         (79, 78, 1),
         (78, 'n6532333222', 1), (80, 66, 1), (82, 81, 1), (81, 'n3432322', 1), (84, 83, 1),
         (83, 'n653233322', 1), ('n36', 86, 1), ('n36', 168, 1), (86, 85, 1), (85, 'n63', 1),
         ('n63', 114, 1), ('n33', 88, 1), ('n33', 110, 1), (88, 87, 1), (87, 'n332', 1),
         ('n332', 134, 1), ('n332', 170, 1), ('n42222222', 90, 1), (90, 89, 1), (89, 'n343', 1),
         (92, 91, 1), (91, 'n66', 1), ('n66', 94, 1), (94, 93, 1), (93, 'n35', 1),
         ('n35', 96, 1), ('n35', 98, 1), (96, 95, 1), (95, 'n68', 1), ('n68', 100, 1),
         (98, 97, 1), (97, 'n682', 1), ('n682', 101, 1), (100, 99, 1), (99, 'n42222222', 1),
         (101, 99, 1), (103, 102, 1), (102, 'n3433', 1), (105, 104, 1), (104, 'n6532334', 1),
         ('n6532334', 106, 1), (106, 47, 1), (108, 107, 1), (107, 'n33', 1), (110, 109, 1),
         (109, 'n672', 1), ('n672', 112, 1), (112, 111, 1), (111, 'n36', 1), (114, 113, 1),
         (113, 'n43', 1), ('n43', 146, 1), ('n67222', 115, 1), (115, 113, 1),
         ('76f38465-01f1-40fe-96f2-0b15eac8b5bb', 117, 1), (117, 116, 1), (116, 'n46', 1), ('n46', 148, 1),
         ('n313', 119, 1), ('n313', 123, 1), (119, 118, 1), (118, 'n616', 1), ('n616', 121, 1),
         (121, 120, 1), (120, 'n44', 1), ('n44', 126, 1), (123, 122, 1), (122, 'n617', 1),
         ('n617', 124, 1), (124, 120, 1), (126, 125, 1), (125, 'n3', 1), ('n362', 128, 1),
         ('n362', 130, 1), (128, 127, 1), (127, 'n632', 1), ('n632', 131, 1), (130, 129, 1),
         (129, 'n672222', 1), ('n672222', 132, 1), (131, 113, 1), (132, 113, 1), (134, 133, 1),
         (133, 'n61422', 1), ('n61422', 135, 1), (135, 113, 1),
         ('ff4c48a0-f279-4b43-913e-bd3d242ca943', 137, 1), (137, 136, 1), (136, 'n45', 1), ('n45', 144, 1),
         ('8e030e58-6e1a-4a89-9c0a-51a227058d8e', 138, 1), (138, 136, 1),
         ('e28ff732-5219-47c8-96b0-a14807f85879', 139, 1), (139, 136, 1),
         ('1dd71534-58b9-412a-84d0-aafcaec7c57c', 140, 1), (140, 136, 1),
         ('ed64243c-ac27-4f6d-a03a-76fbf10160dd', 141, 1), (141, 136, 1),
         ('713b6ebb-9076-4933-b3e9-2d3be11b996a', 142, 1), (142, 136, 1), (144, 143, 1), (143, 'n611', 1),
         ('n611', 150, 1), (146, 145, 1), (146, 166, 1), (145, 'n1', 1), ('n1', 156, 1),
         (148, 147, 1),
         (147, 'n313', 1), (150, 149, 1), (149, 'n38', 1), ('n38', 152, 1), (152, 151, 1),
         (151, 'n0', 1), ('n0', 154, 1), (154, 153, 1), (153, 'n1', 1), (156, 155, 1), (156, 159, 1),
         (155, 'n2', 1), ('n2', 158, 1), (158, 157, 1), (157, 'n22', 1), ('n22', 161, 1),
         (159, 'n13', 1), ('n13', 163, 1), (161, 160, 1), (160, 'n13', 1), (163, 162, 1),
         (162, 'n03', 1), ('n03', 165, 1), (165, 164, 1), (164, 'n12', 1), (166, 'n12', 1),
         (168, 167, 1), (167, 'n67222', 1), (170, 169, 1), (169, 'n64', 1), ('n64', 172, 1),
         (172, 171, 1), (171, 'n362', 1), ('n3',), ('n6',), ('n62',), ('n4',),
         ('76f38465-01f1-40fe-96f2-0b15eac8b5bb',), ('n65',), ('n32',), ('n652',), ('n42',),
         ('n322',), ('n653',), ('n3222',), ('n6532',), ('n65322',), ('n422',),
         ('n34',), ('n342',), ('n4222',), ('n65323',), ('n653232',), ('n6532322',),
         ('n343',), ('n653233',), ('n6532332',), ('n42222',), ('n3432',),
         ('n6532333',), ('n65323332',), ('n422222',), ('n34322',), ('n65323333',),
         ('n34323',), ('n65323334',), ('n653233322',), ('n4222222',), ('n343232',),
         ('n6532333222',), ('n6532333223',), ('n3432322',), ('n33',), ('n672',),
         ('n63',), ('n67222',), ('n66',), ('n35',), ('n68',), ('n682',),
         ('n42222222',), ('n3433',), ('n6532334',), ('n36',), ('n43',), ('n313',),
         ('n616',), ('n617',), ('n332',), ('n362',), ('n632',), ('n672222',),
         ('n61422',), ('n44',), ('1dd71534-58b9-412a-84d0-aafcaec7c57c',),
         ('e28ff732-5219-47c8-96b0-a14807f85879',), ('ed64243c-ac27-4f6d-a03a-76fbf10160dd',),
         ('713b6ebb-9076-4933-b3e9-2d3be11b996a',), ('8e030e58-6e1a-4a89-9c0a-51a227058d8e',),
         ('ff4c48a0-f279-4b43-913e-bd3d242ca943',), ('n1',), ('n45',), ('n46',), ('n611',),
         ('n38',), ('n0',), ('n2',), ('n22',), ('n12',), ('n13',), ('n03',),
         ('n64',), ('n67',), ('n69',), (2,), (1,), (4,), (3,), (6,), (5,), (7,), (9,), (8,), (11,),
         (10,), (13,), (12,), (15,), (14,), (16,), (18,), (17,), (20,), (19,), (21,), (23,), (22,), (25,), (24,), (27,),
         (26,), (29,), (28,), (30,), (32,), (31,), (34,), (33,), (36,), (35,), (38,), (37,), (40,), (39,), (41,), (42,),
         (44,), (43,), (46,), (45,), (48,), (47,), (49,), (51,), (50,), (53,), (52,), (55,), (54,), (57,), (56,), (58,),
         (60,), (59,), (62,), (61,), (63,), (65,), (64,), (67,), (66,), (68,), (70,), (69,), (72,), (71,), (73,), (75,),
         (74,), (77,), (76,), (79,), (78,), (80,), (82,), (81,), (84,), (83,), (86,), (85,), (88,), (87,), (90,), (89,),
         (92,), (91,), (94,), (93,), (96,), (95,), (98,), (97,), (100,), (99,), (101,), (103,), (102,), (105,), (104,),
         (106,), (108,), (107,), (110,), (109,), (112,), (111,), (114,), (113,), (115,), (117,), (116,), (119,), (118,),
         (121,), (120,), (123,), (122,), (124,), (126,), (125,), (128,), (127,), (130,), (129,), (131,), (132,), (134,),
         (133,), (135,), (137,), (136,), (138,), (139,), (140,), (141,), (142,), (144,), (143,), (146,), (145,), (148,),
         (147,), (150,), (149,), (152,), (151,), (154,), (153,), (156,), (155,), (158,), (157,), (159,), (161,), (160,),
         (163,), (162,), (165,), (164,), (166,), (168,), (167,), (170,), (169,), (172,), (171,),
         ]
    g = Graph(from_list=L)
    start = time.time()
    p = g.phase_lines()
    end = time.time()
    assert len(p) == 253, len(p)  # primary objective
    assert end - start < 1  # secondary objective: must take less than a second


def test_sources():
    """
         1 +---> 3 +--> 5 +---> 6          [7]
                        ^       ^
           +------------+       |
           |
         2 +---> 4 +----------> +
        """
    g = Graph(from_list=[
        (1, 3, 1),
        (2, 4, 1),
        (2, 5, 1),
        (3, 5, 1),
        (4, 6, 1),
        (5, 6, 1),
    ])
    g.add_node(7)
    s = g.sources(5)
    e = {1, 2, 3}
    assert s == e

    s2 = g.sources(1)
    e2 = set()
    assert s2 == e2, s2

    s3 = g.sources(6)
    e3 = {1, 2, 3, 4, 5}
    assert s3 == e3

    s4 = g.sources(7)
    e4 = set()
    assert s4 == e4
